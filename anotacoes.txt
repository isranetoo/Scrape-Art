api do token: https://pje.trt2.jus.br/juris-backend/api/token
api documento: https://pje.trt2.jus.br/juris-backend/api/documentos

api opcoes: https://pje.trt2.jus.br/juris-backend/api/opcoes
api filtro: https://pje.trt2.jus.br/juris-backend/api/filtros


api token desafio: https://pje.trt2.jus.br/juris-backend/api/documentos?tokenDesafio=64501445e3c4107f9e580c5ff31666b5cfbd0040de664747dad644abef05fa28e97eaa60ed2cb32be598cb2e023228e1506c5288992cc5f9664b57c3ea10eebb688a12a7407b594b8d5dc034d8ef55dc766528cf709f91e27695b40fec18e6fa&resposta=4b87us

api token captcha: https://pje.trt2.jus.br/juris-backend/api/documentos?tokenCaptcha=7d532254756bd4d6030eda3b34b506ed6ccf4fac92c963074f09ca9ce9caf883

api O captcha: https://pje.trt2.jus.br/juris-backend/api/captcha
 
padrao de URL: https://pje.trt2.jus.br/consultaprocessual/detalhe-processo/
padrao de URL Inteiro Teor: https://pje.trt2.jus.br/jurisprudencia/

URL Todo: https://pje.trt2.jus.br/juris-backend/api/documentos?tokenDesafio=a4bfb93d6db77d72899f9c726e7a65c33b266cd9e3f8789039adcdaeb904b1be56d58289ba3375fbebb96af6a43d2eac4a3a1f847f84310ce174b9fb1e191bb51bda9598dc16e7452588da1b33edc67b34e0c28407bc7fb6f0026a1fa050ea9d&resposta=fsvtut
Link: https://pje.trt2.jus.br/juris-backend/api/documentos?tokenDesafio=
TokenDesafion: ?tokenDesafio=
O TOKEN pode variar: a4bfb93d6db77d72899f9c726e7a65c33b266cd9e3f8789039adcdaeb904b1be56d58289ba3375fbebb96af6a43d2eac4a3a1f847f84310ce174b9fb1e191bb51bda9598dc16e7452588da1b33edc67b34e0c28407bc7fb6f0026a1fa050ea9d&resposta=fsvtut

https://pje.trt2.jus.br/juris-backend/api/documentos?tokenCaptcha=a4bfb93d6db77d72899f9c726e7a65c31cfa9f351057aa383115e73014f98a82

<---------------------------->

o token é uma VAR, tokenCaptcha = a4bfb93d6db77d72899f9c726e7a65c31cfa9f351057aa383115e73014f98a82

<---------------------------->

Request URL:
https://pje.trt2.jus.br/juris-backend/api/documentos?tokenCaptcha=a4bfb93d6db77d72899f9c726e7a65c31cfa9f351057aa383115e73014f98a82
Request Method:
POST
Status Code:
200 OK

<---------------------------->

Request URL:
https://pje.trt2.jus.br/juris-backend/api/captcha
Request Method:
GET
Status Code:
200 OK


<---------------------------->

Random Forest

#<--------------------------------------> 
    # margin-top-0_3 margin-bottom-0_3


    By.CSS_SELECTOR, "div.margin-top-0_3.margin-bottom-0_3"

'src='

    with open(r"captcha.jpg", 'wb') as f:
        f.write(base64.b64decode(img_captcha_base64))
        ` 
    
def solve_captcha_local(th1, th2, sig1, sig2, bytes_data):
    original = Image.open(BytesIO(base64.b64decode(bytes_data)))    


    https://gist.github.com/spirkaa/4c3b8ad8fd34324bd307

#<-------------------------------------->


from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC

# Inicializar o WebDriver
driver = webdriver.Chrome()  # ou webdriver.Firefox(), dependendo do navegador que você está usando
driver.get("URL_DA_SUA_PAGINA")  # substitua pela URL onde o elemento está localizado

try:
    # Esperar até que o elemento com o XPath especificado esteja presente
    imagem_captcha = WebDriverWait(driver, 10).until(
        EC.presence_of_element_located((By.XPATH, '//*[@id="imagemCaptcha"]'))
    )

    # Coletar o valor do atributo 'src'
    src_valor = imagem_captcha.get_attribute("src")
    print("Valor do atributo 'src':", src_valor)

except Exception as e:
    print("Elemento não encontrado ou ocorreu um erro:", e)

finally:
    driver.quit()
